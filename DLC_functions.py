##functions specific to DLC analysis (possibly just put these in peaks.py)
import os
import h5py
import numpy as np
from matplotlib import pyplot as plt
import scipy as scipy
from scipy.signal import find_peaks
import matplotlib.image as mpimg



def get_data_column(path, index):
    """takes path to h5 file generated by dlc and returns the column of data for specific index --- 
    must know the index for corresponding labeled data-may need to check csv because no header in h5 file
    
    
    current pattern is # scorer	DLC_resnet50_bruker_cropJun2shuffle1_10001	DLC_resnet50_bruker_cropJun2shuffle1_10001	DLC_resnet50_bruker_cropJun2shuffle1_10001	DLC_resnet50_bruker_cropJun2shuffle1_10001	DLC_resnet50_bruker_cropJun2shuffle1_10001	DLC_resnet50_bruker_cropJun2shuffle1_10001	DLC_resnet50_bruker_cropJun2shuffle1_10001	DLC_resnet50_bruker_cropJun2shuffle1_10001	DLC_resnet50_bruker_cropJun2shuffle1_10001	DLC_resnet50_bruker_cropJun2shuffle1_10001	DLC_resnet50_bruker_cropJun2shuffle1_10001	DLC_resnet50_bruker_cropJun2shuffle1_10001
    # bodyparts	head	head	head	proboscis_tip	proboscis_tip	proboscis_tip	extended	extended	extended	neck	neck	neck
    
    Example of use:
    head_x = get_data_column(path, 0)
    head_y = get_data_column(path, 1)
    head_likelihood = get_data_column(path, 2)
    proboscis_x = get_data_column(path, 3)
    proboscis_y = get_data_column(path, 4)
    proboscis_likelihood = get_data_column(path, 5)
    extend_x = get_data_column(path, 6)
    extend_y = get_data_column(path, 7)
    extend_likelihood = get_data_column(path, 8)
    neck_x = get_data_column(path, 9)
    neck_y = get_data_column(path, 10)
    neck_likelihood = get_data_column(path, 11)
    """
    with h5py.File(path, 'r') as f:
        data = np.array(f['df_with_missing']['table'])

        #this data is formatted weird. values block indicates the psuedo dict key toget to data part, 
        # then want every column
        specified_column = data[:]['values_block_0'][:,index]
        return specified_column
    

def make_empty_h5(savefile, key, dims):
    """make empty h5 file with specified key and dims as the shape. returns the filename"""
    with h5py.File(savefile, 'w') as f:
        dset = f.create_dataset(key, dims, dtype='float32', chunks=True)
    return savefile

def add_to_h5(Path, key, value):
    """adds new key value to h5 file and checks if it already exists
    does overwrite"""
    with h5py.File(Path, 'a') as f:
        if key not in f.keys(): #check if key already in file
            f[key] = value
        else:
            del f[key]
            #print('deleting old key and OVERWRITING')
            f[key] = value

def check_for_key(h5Path, key):
    """returns true if key to h5file path exists
    args:
        h5Path = path to h5 file
        key = string want to look for
    returns:
        True if found key
        False if key doesn't exist in file
        """
    with h5py.File(h5Path, 'r') as f:
        if key in f.keys():
            return True
        else:
            return False

def make_dirs(Path):
    """make folder if it doesn't already exist"""
    if not os.path.isdir(Path):
        os.mkdir(Path)

